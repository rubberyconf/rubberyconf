// protoc --go_out=plugins=grpc:.  ./rubberyconf.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: rubberyconf.proto

package grpcapipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusType int32

const (
	StatusType_Success             StatusType = 0
	StatusType_BadRequest          StatusType = 1
	StatusType_InternalServerError StatusType = 2
	StatusType_NotFound            StatusType = 3
)

// Enum value maps for StatusType.
var (
	StatusType_name = map[int32]string{
		0: "Success",
		1: "BadRequest",
		2: "InternalServerError",
		3: "NotFound",
	}
	StatusType_value = map[string]int32{
		"Success":             0,
		"BadRequest":          1,
		"InternalServerError": 2,
		"NotFound":            3,
	}
)

func (x StatusType) Enum() *StatusType {
	p := new(StatusType)
	*p = x
	return p
}

func (x StatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_rubberyconf_proto_enumTypes[0].Descriptor()
}

func (StatusType) Type() protoreflect.EnumType {
	return &file_rubberyconf_proto_enumTypes[0]
}

func (x StatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusType.Descriptor instead.
func (StatusType) EnumDescriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{0}
}

type FeatureIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureName string `protobuf:"bytes,1,opt,name=featureName,proto3" json:"featureName,omitempty"`
}

func (x *FeatureIdRequest) Reset() {
	*x = FeatureIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureIdRequest) ProtoMessage() {}

func (x *FeatureIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureIdRequest.ProtoReflect.Descriptor instead.
func (*FeatureIdRequest) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureIdRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

//Note: all these fields must have same names with json tagged in feature.FeatureDefinition.
type FeatureDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Meta           *FeatureDefinitionMetaCls     `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	Default        *FeatureDefinitionDefaultCls  `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	Configurations []*FeatureDefinitionConfigCls `protobuf:"bytes,4,rep,name=configurations,proto3" json:"configurations,omitempty"`
}

func (x *FeatureDefinition) Reset() {
	*x = FeatureDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDefinition) ProtoMessage() {}

func (x *FeatureDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDefinition.ProtoReflect.Descriptor instead.
func (*FeatureDefinition) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureDefinition) GetMeta() *FeatureDefinitionMetaCls {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *FeatureDefinition) GetDefault() *FeatureDefinitionDefaultCls {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *FeatureDefinition) GetConfigurations() []*FeatureDefinitionConfigCls {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type FeatureCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Feature *FeatureDefinition `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *FeatureCreationRequest) Reset() {
	*x = FeatureCreationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureCreationRequest) ProtoMessage() {}

func (x *FeatureCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureCreationRequest.ProtoReflect.Descriptor instead.
func (*FeatureCreationRequest) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureCreationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureCreationRequest) GetFeature() *FeatureDefinition {
	if x != nil {
		return x.Feature
	}
	return nil
}

type FeatureBasicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusType `protobuf:"varint,1,opt,name=status,proto3,enum=grpcapi.StatusType" json:"status,omitempty"`
}

func (x *FeatureBasicResponse) Reset() {
	*x = FeatureBasicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureBasicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureBasicResponse) ProtoMessage() {}

func (x *FeatureBasicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureBasicResponse.ProtoReflect.Descriptor instead.
func (*FeatureBasicResponse) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{3}
}

func (x *FeatureBasicResponse) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_Success
}

type FeatureShortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusType `protobuf:"varint,1,opt,name=status,proto3,enum=grpcapi.StatusType" json:"status,omitempty"`
	Value  *anypb.Any `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // serialization from string
	Type   string     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FeatureShortResponse) Reset() {
	*x = FeatureShortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureShortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureShortResponse) ProtoMessage() {}

func (x *FeatureShortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureShortResponse.ProtoReflect.Descriptor instead.
func (*FeatureShortResponse) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{4}
}

func (x *FeatureShortResponse) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_Success
}

func (x *FeatureShortResponse) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FeatureShortResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type FeatureFullResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  StatusType         `protobuf:"varint,1,opt,name=status,proto3,enum=grpcapi.StatusType" json:"status,omitempty"`
	Feature *FeatureDefinition `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *FeatureFullResponse) Reset() {
	*x = FeatureFullResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureFullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFullResponse) ProtoMessage() {}

func (x *FeatureFullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFullResponse.ProtoReflect.Descriptor instead.
func (*FeatureFullResponse) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{5}
}

func (x *FeatureFullResponse) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_Success
}

func (x *FeatureFullResponse) GetFeature() *FeatureDefinition {
	if x != nil {
		return x.Feature
	}
	return nil
}

type FeatureDefinitionDefaultCls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *FeatureDefinitionDefaultClsValueCls `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Ttl   string                               `protobuf:"bytes,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *FeatureDefinitionDefaultCls) Reset() {
	*x = FeatureDefinitionDefaultCls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureDefinitionDefaultCls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDefinitionDefaultCls) ProtoMessage() {}

func (x *FeatureDefinitionDefaultCls) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDefinitionDefaultCls.ProtoReflect.Descriptor instead.
func (*FeatureDefinitionDefaultCls) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FeatureDefinitionDefaultCls) GetValue() *FeatureDefinitionDefaultClsValueCls {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FeatureDefinitionDefaultCls) GetTtl() string {
	if x != nil {
		return x.Ttl
	}
	return ""
}

type FeatureDefinitionMetaCls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string   `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Tags        []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *FeatureDefinitionMetaCls) Reset() {
	*x = FeatureDefinitionMetaCls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureDefinitionMetaCls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDefinitionMetaCls) ProtoMessage() {}

func (x *FeatureDefinitionMetaCls) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDefinitionMetaCls.ProtoReflect.Descriptor instead.
func (*FeatureDefinitionMetaCls) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{1, 1}
}

func (x *FeatureDefinitionMetaCls) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureDefinitionMetaCls) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type FeatureDefinitionRulesCls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment  []string                                  `protobuf:"bytes,1,rep,name=environment,proto3" json:"environment,omitempty"`
	QueryString  *FeatureDefinitionRulesClsKeyValueCls     `protobuf:"bytes,2,opt,name=queryString,proto3" json:"queryString,omitempty"`
	Header       *FeatureDefinitionRulesClsKeyValueCls     `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Platform     []string                                  `protobuf:"bytes,4,rep,name=platform,proto3" json:"platform,omitempty"`
	Version      []string                                  `protobuf:"bytes,5,rep,name=version,proto3" json:"version,omitempty"`
	Country      []string                                  `protobuf:"bytes,6,rep,name=country,proto3" json:"country,omitempty"`
	City         []string                                  `protobuf:"bytes,7,rep,name=city,proto3" json:"city,omitempty"`
	UserId       []string                                  `protobuf:"bytes,8,rep,name=userId,proto3" json:"userId,omitempty"`
	UserGroup    []string                                  `protobuf:"bytes,9,rep,name=userGroup,proto3" json:"userGroup,omitempty"`
	FeatureTimer *FeatureDefinitionRulesClsFeatureTimerCls `protobuf:"bytes,10,opt,name=featureTimer,proto3" json:"featureTimer,omitempty"`
}

func (x *FeatureDefinitionRulesCls) Reset() {
	*x = FeatureDefinitionRulesCls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureDefinitionRulesCls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDefinitionRulesCls) ProtoMessage() {}

func (x *FeatureDefinitionRulesCls) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDefinitionRulesCls.ProtoReflect.Descriptor instead.
func (*FeatureDefinitionRulesCls) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{1, 2}
}

func (x *FeatureDefinitionRulesCls) GetEnvironment() []string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *FeatureDefinitionRulesCls) GetQueryString() *FeatureDefinitionRulesClsKeyValueCls {
	if x != nil {
		return x.QueryString
	}
	return nil
}

func (x *FeatureDefinitionRulesCls) GetHeader() *FeatureDefinitionRulesClsKeyValueCls {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FeatureDefinitionRulesCls) GetPlatform() []string {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *FeatureDefinitionRulesCls) GetVersion() []string {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *FeatureDefinitionRulesCls) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *FeatureDefinitionRulesCls) GetCity() []string {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *FeatureDefinitionRulesCls) GetUserId() []string {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *FeatureDefinitionRulesCls) GetUserGroup() []string {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

func (x *FeatureDefinitionRulesCls) GetFeatureTimer() *FeatureDefinitionRulesClsFeatureTimerCls {
	if x != nil {
		return x.FeatureTimer
	}
	return nil
}

type FeatureDefinitionRollOutCls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy       string `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy,omitempty"`
	EnabledForOnly string `protobuf:"bytes,2,opt,name=enabledForOnly,proto3" json:"enabledForOnly,omitempty"`
	Selector       string `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *FeatureDefinitionRollOutCls) Reset() {
	*x = FeatureDefinitionRollOutCls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureDefinitionRollOutCls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDefinitionRollOutCls) ProtoMessage() {}

func (x *FeatureDefinitionRollOutCls) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDefinitionRollOutCls.ProtoReflect.Descriptor instead.
func (*FeatureDefinitionRollOutCls) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{1, 3}
}

func (x *FeatureDefinitionRollOutCls) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *FeatureDefinitionRollOutCls) GetEnabledForOnly() string {
	if x != nil {
		return x.EnabledForOnly
	}
	return ""
}

func (x *FeatureDefinitionRollOutCls) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type FeatureDefinitionConfigCls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RulesBehaviour string                       `protobuf:"bytes,2,opt,name=rulesBehaviour,proto3" json:"rulesBehaviour,omitempty"`
	Rules          []*FeatureDefinitionRulesCls `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
	Value          *anypb.Any                   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Rollout        *FeatureDefinitionRollOutCls `protobuf:"bytes,5,opt,name=rollout,proto3" json:"rollout,omitempty"`
}

func (x *FeatureDefinitionConfigCls) Reset() {
	*x = FeatureDefinitionConfigCls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureDefinitionConfigCls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDefinitionConfigCls) ProtoMessage() {}

func (x *FeatureDefinitionConfigCls) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDefinitionConfigCls.ProtoReflect.Descriptor instead.
func (*FeatureDefinitionConfigCls) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{1, 4}
}

func (x *FeatureDefinitionConfigCls) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeatureDefinitionConfigCls) GetRulesBehaviour() string {
	if x != nil {
		return x.RulesBehaviour
	}
	return ""
}

func (x *FeatureDefinitionConfigCls) GetRules() []*FeatureDefinitionRulesCls {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *FeatureDefinitionConfigCls) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FeatureDefinitionConfigCls) GetRollout() *FeatureDefinitionRollOutCls {
	if x != nil {
		return x.Rollout
	}
	return nil
}

type FeatureDefinitionDefaultClsValueCls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // serialization to string by default
	Type string     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FeatureDefinitionDefaultClsValueCls) Reset() {
	*x = FeatureDefinitionDefaultClsValueCls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureDefinitionDefaultClsValueCls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDefinitionDefaultClsValueCls) ProtoMessage() {}

func (x *FeatureDefinitionDefaultClsValueCls) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDefinitionDefaultClsValueCls.ProtoReflect.Descriptor instead.
func (*FeatureDefinitionDefaultClsValueCls) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *FeatureDefinitionDefaultClsValueCls) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FeatureDefinitionDefaultClsValueCls) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type FeatureDefinitionRulesClsKeyValueCls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *FeatureDefinitionRulesClsKeyValueCls) Reset() {
	*x = FeatureDefinitionRulesClsKeyValueCls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureDefinitionRulesClsKeyValueCls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDefinitionRulesClsKeyValueCls) ProtoMessage() {}

func (x *FeatureDefinitionRulesClsKeyValueCls) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDefinitionRulesClsKeyValueCls.ProtoReflect.Descriptor instead.
func (*FeatureDefinitionRulesClsKeyValueCls) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *FeatureDefinitionRulesClsKeyValueCls) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FeatureDefinitionRulesClsKeyValueCls) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type FeatureDefinitionRulesClsFeatureTimerCls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerTimer string `protobuf:"bytes,1,opt,name=triggerTimer,proto3" json:"triggerTimer,omitempty"`
}

func (x *FeatureDefinitionRulesClsFeatureTimerCls) Reset() {
	*x = FeatureDefinitionRulesClsFeatureTimerCls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rubberyconf_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureDefinitionRulesClsFeatureTimerCls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDefinitionRulesClsFeatureTimerCls) ProtoMessage() {}

func (x *FeatureDefinitionRulesClsFeatureTimerCls) ProtoReflect() protoreflect.Message {
	mi := &file_rubberyconf_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDefinitionRulesClsFeatureTimerCls.ProtoReflect.Descriptor instead.
func (*FeatureDefinitionRulesClsFeatureTimerCls) Descriptor() ([]byte, []int) {
	return file_rubberyconf_proto_rawDescGZIP(), []int{1, 2, 1}
}

func (x *FeatureDefinitionRulesClsFeatureTimerCls) GetTriggerTimer() string {
	if x != nil {
		return x.TriggerTimer
	}
	return ""
}

var File_rubberyconf_proto protoreflect.FileDescriptor

var file_rubberyconf_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe8, 0x0a,
	0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x73, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x73, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xae,
	0x01, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6c, 0x73, 0x12, 0x44, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x6c, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6c, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a, 0x48, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6c,
	0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0x3f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x1a, 0xa9, 0x04, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6c, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x51, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6c, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6c, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x47, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x43, 0x6c, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6c, 0x73, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x57, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6c, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x73,
	0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x35,
	0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6c, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x35, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0x6c, 0x0a, 0x0a,
	0x72, 0x6f, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x43, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xeb, 0x01, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72,
	0x12, 0x39, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x43, 0x6c, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x43, 0x6c, 0x73, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x22, 0x62, 0x0a, 0x16, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x43, 0x0a, 0x14,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x83, 0x01, 0x0a, 0x14, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x13, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2a, 0x50, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0x03, 0x32, 0xb3, 0x02, 0x0a, 0x12, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x5a, 0x0a, 0x15, 0x72, 0x75, 0x62,
	0x62, 0x65, 0x72, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x41, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rubberyconf_proto_rawDescOnce sync.Once
	file_rubberyconf_proto_rawDescData = file_rubberyconf_proto_rawDesc
)

func file_rubberyconf_proto_rawDescGZIP() []byte {
	file_rubberyconf_proto_rawDescOnce.Do(func() {
		file_rubberyconf_proto_rawDescData = protoimpl.X.CompressGZIP(file_rubberyconf_proto_rawDescData)
	})
	return file_rubberyconf_proto_rawDescData
}

var file_rubberyconf_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rubberyconf_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_rubberyconf_proto_goTypes = []interface{}{
	(StatusType)(0),                                  // 0: grpcapi.StatusType
	(*FeatureIdRequest)(nil),                         // 1: grpcapi.featureIdRequest
	(*FeatureDefinition)(nil),                        // 2: grpcapi.featureDefinition
	(*FeatureCreationRequest)(nil),                   // 3: grpcapi.featureCreationRequest
	(*FeatureBasicResponse)(nil),                     // 4: grpcapi.featureBasicResponse
	(*FeatureShortResponse)(nil),                     // 5: grpcapi.featureShortResponse
	(*FeatureFullResponse)(nil),                      // 6: grpcapi.featureFullResponse
	(*FeatureDefinitionDefaultCls)(nil),              // 7: grpcapi.featureDefinition.defaultCls
	(*FeatureDefinitionMetaCls)(nil),                 // 8: grpcapi.featureDefinition.metaCls
	(*FeatureDefinitionRulesCls)(nil),                // 9: grpcapi.featureDefinition.rulesCls
	(*FeatureDefinitionRollOutCls)(nil),              // 10: grpcapi.featureDefinition.rollOutCls
	(*FeatureDefinitionConfigCls)(nil),               // 11: grpcapi.featureDefinition.configCls
	(*FeatureDefinitionDefaultClsValueCls)(nil),      // 12: grpcapi.featureDefinition.defaultCls.valueCls
	(*FeatureDefinitionRulesClsKeyValueCls)(nil),     // 13: grpcapi.featureDefinition.rulesCls.keyValueCls
	(*FeatureDefinitionRulesClsFeatureTimerCls)(nil), // 14: grpcapi.featureDefinition.rulesCls.featureTimerCls
	(*anypb.Any)(nil),                                // 15: google.protobuf.Any
}
var file_rubberyconf_proto_depIdxs = []int32{
	8,  // 0: grpcapi.featureDefinition.meta:type_name -> grpcapi.featureDefinition.metaCls
	7,  // 1: grpcapi.featureDefinition.default:type_name -> grpcapi.featureDefinition.defaultCls
	11, // 2: grpcapi.featureDefinition.configurations:type_name -> grpcapi.featureDefinition.configCls
	2,  // 3: grpcapi.featureCreationRequest.feature:type_name -> grpcapi.featureDefinition
	0,  // 4: grpcapi.featureBasicResponse.status:type_name -> grpcapi.StatusType
	0,  // 5: grpcapi.featureShortResponse.status:type_name -> grpcapi.StatusType
	15, // 6: grpcapi.featureShortResponse.value:type_name -> google.protobuf.Any
	0,  // 7: grpcapi.featureFullResponse.status:type_name -> grpcapi.StatusType
	2,  // 8: grpcapi.featureFullResponse.feature:type_name -> grpcapi.featureDefinition
	12, // 9: grpcapi.featureDefinition.defaultCls.value:type_name -> grpcapi.featureDefinition.defaultCls.valueCls
	13, // 10: grpcapi.featureDefinition.rulesCls.queryString:type_name -> grpcapi.featureDefinition.rulesCls.keyValueCls
	13, // 11: grpcapi.featureDefinition.rulesCls.header:type_name -> grpcapi.featureDefinition.rulesCls.keyValueCls
	14, // 12: grpcapi.featureDefinition.rulesCls.featureTimer:type_name -> grpcapi.featureDefinition.rulesCls.featureTimerCls
	9,  // 13: grpcapi.featureDefinition.configCls.rules:type_name -> grpcapi.featureDefinition.rulesCls
	15, // 14: grpcapi.featureDefinition.configCls.value:type_name -> google.protobuf.Any
	10, // 15: grpcapi.featureDefinition.configCls.rollout:type_name -> grpcapi.featureDefinition.rollOutCls
	15, // 16: grpcapi.featureDefinition.defaultCls.valueCls.data:type_name -> google.protobuf.Any
	1,  // 17: grpcapi.rubberyConfService.Get:input_type -> grpcapi.featureIdRequest
	3,  // 18: grpcapi.rubberyConfService.Create:input_type -> grpcapi.featureCreationRequest
	3,  // 19: grpcapi.rubberyConfService.Patch:input_type -> grpcapi.featureCreationRequest
	1,  // 20: grpcapi.rubberyConfService.Delete:input_type -> grpcapi.featureIdRequest
	1,  // 21: grpcapi.rubberyFeatureService.Get:input_type -> grpcapi.featureIdRequest
	6,  // 22: grpcapi.rubberyConfService.Get:output_type -> grpcapi.featureFullResponse
	4,  // 23: grpcapi.rubberyConfService.Create:output_type -> grpcapi.featureBasicResponse
	4,  // 24: grpcapi.rubberyConfService.Patch:output_type -> grpcapi.featureBasicResponse
	4,  // 25: grpcapi.rubberyConfService.Delete:output_type -> grpcapi.featureBasicResponse
	5,  // 26: grpcapi.rubberyFeatureService.Get:output_type -> grpcapi.featureShortResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_rubberyconf_proto_init() }
func file_rubberyconf_proto_init() {
	if File_rubberyconf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rubberyconf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureCreationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureBasicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureShortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureFullResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureDefinitionDefaultCls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureDefinitionMetaCls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureDefinitionRulesCls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureDefinitionRollOutCls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureDefinitionConfigCls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureDefinitionDefaultClsValueCls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureDefinitionRulesClsKeyValueCls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rubberyconf_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureDefinitionRulesClsFeatureTimerCls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rubberyconf_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rubberyconf_proto_goTypes,
		DependencyIndexes: file_rubberyconf_proto_depIdxs,
		EnumInfos:         file_rubberyconf_proto_enumTypes,
		MessageInfos:      file_rubberyconf_proto_msgTypes,
	}.Build()
	File_rubberyconf_proto = out.File
	file_rubberyconf_proto_rawDesc = nil
	file_rubberyconf_proto_goTypes = nil
	file_rubberyconf_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RubberyConfServiceClient is the client API for RubberyConfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RubberyConfServiceClient interface {
	Get(ctx context.Context, in *FeatureIdRequest, opts ...grpc.CallOption) (*FeatureFullResponse, error)
	Create(ctx context.Context, in *FeatureCreationRequest, opts ...grpc.CallOption) (*FeatureBasicResponse, error)
	Patch(ctx context.Context, in *FeatureCreationRequest, opts ...grpc.CallOption) (*FeatureBasicResponse, error)
	Delete(ctx context.Context, in *FeatureIdRequest, opts ...grpc.CallOption) (*FeatureBasicResponse, error)
}

type rubberyConfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRubberyConfServiceClient(cc grpc.ClientConnInterface) RubberyConfServiceClient {
	return &rubberyConfServiceClient{cc}
}

func (c *rubberyConfServiceClient) Get(ctx context.Context, in *FeatureIdRequest, opts ...grpc.CallOption) (*FeatureFullResponse, error) {
	out := new(FeatureFullResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.rubberyConfService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubberyConfServiceClient) Create(ctx context.Context, in *FeatureCreationRequest, opts ...grpc.CallOption) (*FeatureBasicResponse, error) {
	out := new(FeatureBasicResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.rubberyConfService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubberyConfServiceClient) Patch(ctx context.Context, in *FeatureCreationRequest, opts ...grpc.CallOption) (*FeatureBasicResponse, error) {
	out := new(FeatureBasicResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.rubberyConfService/Patch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubberyConfServiceClient) Delete(ctx context.Context, in *FeatureIdRequest, opts ...grpc.CallOption) (*FeatureBasicResponse, error) {
	out := new(FeatureBasicResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.rubberyConfService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RubberyConfServiceServer is the server API for RubberyConfService service.
type RubberyConfServiceServer interface {
	Get(context.Context, *FeatureIdRequest) (*FeatureFullResponse, error)
	Create(context.Context, *FeatureCreationRequest) (*FeatureBasicResponse, error)
	Patch(context.Context, *FeatureCreationRequest) (*FeatureBasicResponse, error)
	Delete(context.Context, *FeatureIdRequest) (*FeatureBasicResponse, error)
}

// UnimplementedRubberyConfServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRubberyConfServiceServer struct {
}

func (*UnimplementedRubberyConfServiceServer) Get(context.Context, *FeatureIdRequest) (*FeatureFullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRubberyConfServiceServer) Create(context.Context, *FeatureCreationRequest) (*FeatureBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRubberyConfServiceServer) Patch(context.Context, *FeatureCreationRequest) (*FeatureBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (*UnimplementedRubberyConfServiceServer) Delete(context.Context, *FeatureIdRequest) (*FeatureBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterRubberyConfServiceServer(s *grpc.Server, srv RubberyConfServiceServer) {
	s.RegisterService(&_RubberyConfService_serviceDesc, srv)
}

func _RubberyConfService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubberyConfServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.rubberyConfService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubberyConfServiceServer).Get(ctx, req.(*FeatureIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubberyConfService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubberyConfServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.rubberyConfService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubberyConfServiceServer).Create(ctx, req.(*FeatureCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubberyConfService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubberyConfServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.rubberyConfService/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubberyConfServiceServer).Patch(ctx, req.(*FeatureCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubberyConfService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubberyConfServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.rubberyConfService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubberyConfServiceServer).Delete(ctx, req.(*FeatureIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RubberyConfService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.rubberyConfService",
	HandlerType: (*RubberyConfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RubberyConfService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RubberyConfService_Create_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _RubberyConfService_Patch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RubberyConfService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rubberyconf.proto",
}

// RubberyFeatureServiceClient is the client API for RubberyFeatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RubberyFeatureServiceClient interface {
	Get(ctx context.Context, in *FeatureIdRequest, opts ...grpc.CallOption) (*FeatureShortResponse, error)
}

type rubberyFeatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRubberyFeatureServiceClient(cc grpc.ClientConnInterface) RubberyFeatureServiceClient {
	return &rubberyFeatureServiceClient{cc}
}

func (c *rubberyFeatureServiceClient) Get(ctx context.Context, in *FeatureIdRequest, opts ...grpc.CallOption) (*FeatureShortResponse, error) {
	out := new(FeatureShortResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.rubberyFeatureService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RubberyFeatureServiceServer is the server API for RubberyFeatureService service.
type RubberyFeatureServiceServer interface {
	Get(context.Context, *FeatureIdRequest) (*FeatureShortResponse, error)
}

// UnimplementedRubberyFeatureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRubberyFeatureServiceServer struct {
}

func (*UnimplementedRubberyFeatureServiceServer) Get(context.Context, *FeatureIdRequest) (*FeatureShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterRubberyFeatureServiceServer(s *grpc.Server, srv RubberyFeatureServiceServer) {
	s.RegisterService(&_RubberyFeatureService_serviceDesc, srv)
}

func _RubberyFeatureService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubberyFeatureServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.rubberyFeatureService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubberyFeatureServiceServer).Get(ctx, req.(*FeatureIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RubberyFeatureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.rubberyFeatureService",
	HandlerType: (*RubberyFeatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RubberyFeatureService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rubberyconf.proto",
}
